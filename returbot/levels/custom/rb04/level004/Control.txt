public class Camps
{
    point[] camps, resp0, resp1, resp2, resp3, resp4;
    float[] awd;
    int i;
    static float[] out0, out1, out2, out3, out4;
    
    void Camps()
    {
        i = 0;
        camps[i].x = -160.09; camps[i].y = 9.69802; camps[i++].z = 0;
        camps[i].x = -169.342; camps[i].y = 90.0963; camps[i++].z = 0;
        camps[i].x = -138.376; camps[i].y = 141.723; camps[i++].z = 0;
        camps[i].x = -8.62029; camps[i].y = 178.623; camps[i++].z = 0;
        camps[i].x = 25.4252; camps[i].y = 28.4389; camps[i++].z = 0;
        i = 0;
        resp0[i].x = -350.602; resp0[i].y = 84.2715; resp0[i++].z = 0;
        resp0[i].x = -93.498; resp0[i].y = 0.0418458; resp0[i++].z = 0;
        resp0[i].x = -107.561; resp0[i].y = 44.8057; resp0[i++].z = 0;
        i = 0;
        resp1[i].x = -116.498; resp1[i].y = 75.3255; resp1[i++].z = 0;
        resp1[i].x = -321.713; resp1[i].y = 144.735; resp1[i++].z = 0;
        i = 0;
        resp2[i].x = -112.648; resp2[i].y = 117.156; resp2[i++].z = 0;
        resp2[i].x = -181.894; resp2[i].y = 156.12; resp2[i++].z = 0;
        i = 0;
        resp3[i].x = 207.222; resp3[i].y = 225.837; resp3[i++].z = 0;
        resp3[i].x = 107.624; resp3[i].y = 356.806; resp3[i++].z = 0;
        resp3[i].x = -2.72068; resp3[i].y = 351.422; resp3[i++].z = 0;
        i = 0;
        resp4[i].x = 195.726; resp4[i].y = 354.882; resp4[i++].z = 0;
        resp4[i].x = 202.471; resp4[i].y = 232.146; resp4[i++].z = 0;
        i = 0;
        awd[i++] = 40;
        awd[i++] = 40;
        awd[i++] = 40;
        awd[i++] = 40;
        awd[i++] = 60;
        
        
        i = 0;
        out0[i++] = -1;
        out0[i++] = -1;
        out0[i++] = -1;
        
        i = 0;
        out1[i++] = -1;
        out1[i++] = -1;
        
        i = 0;
        out2[i++] = -1;
        out2[i++] = -1;
        
        i = 0;
        out3[i++] = -1;
        out3[i++] = -1;
        
        i = 0;
        out4[i++] = -1;
        out4[i++] = -1;
        
        i = 0;
    }
}

public int Spawn(int n)
{
	int     list[], i = 0, s = 0;
    point   rp[];
    
	list[i++] = AlienEgg;
	list[i++] = AlienAnt;
	list[i++] = AlienSpider;
	list[i++] = AlienWorm;
	list[i++] = AlienWasp;
    
    Camps camps();
    
    if(n == 0){ rp = camps.resp0; }
    if(n == 1){ rp = camps.resp1; }
    if(n == 2){ rp = camps.resp2; }
    if(n == 3){ rp = camps.resp3; }
    if(n == 4){ rp = camps.resp4; }
    
    i = 0;
    while(i < sizeof(rp))
    {
        if(radar(list) == null or distance2d(rp[i],search(list,rp[i]).position) > 2)
        {
            s = 1;
            produce(rp[i],360*rand(),AlienSpider,"c_spider_01.txt");
            break;
        }
        i++;
    }
    return s;
}

public class Roam_data
{
    point center;
    float roamDist;
    float guardDist;
    float attackDist;
    float frange;
    float appmin;
    float pred;
    float cgo;
    int mid;
    int status;
    int fp;
    int hc;
    int hc2;
    void Roam_data()
    {
        fp = 0;
        hc =-1;
        hc2 = -1;
    }
}

public void Rdata_set(int cat, point pos, Roam_data rdata)
{
    point amb0_0, amb0_1, amb0_2, amb0_t;
    amb0_0.x = -57; amb0_0.y = -243; amb0_0.z = 0;
    amb0_1.x = -87; amb0_1.y = -217; amb0_1.z = 0;
    amb0_2.x = -125; amb0_2.y = -232; amb0_2.z = 0;
    amb0_t.x = -130; amb0_t.y = -233; amb0_t.z = 0;
    
    point rp[];
    float out[];
    
    int i, i2;
    
    Camps camps();
    
    if(rdata.status == -1)
    {
        rdata.status = 0;
        rdata.center = pos;
        if(rdata.mid == 15)
        {
            rdata.roamDist = 10;
            rdata.guardDist = 10;
        }
        else
        {
            rdata.roamDist = 20;
            rdata.guardDist = 20;
        }
        if(cat == AlienAnt)
        {
            rdata.attackDist = 40;
            rdata.frange = 40;
        }
        else
        {
            rdata.attackDist = 45;
            rdata.frange = 8;
        }
        if(rdata.mid == 15)
        {
            rdata.attackDist = rdata.attackDist / 2;
        }
        else
        {
            i2 = 0;
            while(rdata.hc == -1 and i2 < 5)
            {
                if(i2 == 0){ rp = camps.resp0; }
                if(i2 == 1){ rp = camps.resp1; }
                if(i2 == 2){ rp = camps.resp2; }
                if(i2 == 3){ rp = camps.resp3; }
                if(i2 == 4){ rp = camps.resp4; }
                i = 0;
                while(rdata.hc == -1 and i < sizeof(rp))
                {
                    if(distance2d(pos,rp[i]) < 6)
                    {
                        rdata.hc = i2;
                        break;
                    }
                    i++;
                }
                i2++;
            }
            if(rdata.hc != -1)
            {
                rdata.mid = 30;
                rdata.center = camps.camps[rdata.hc];
                if(rdata.hc == 0){ out = camps.out0; }
                if(rdata.hc == 1){ out = camps.out1; }
                if(rdata.hc == 2){ out = camps.out2; }
                if(rdata.hc == 3){ out = camps.out3; }
                if(rdata.hc == 4){ out = camps.out4; }
                i = 0;
                while(rdata.hc2 == -1 and i < sizeof(out))
                {
                    if(out[i] <= abstime())
                    {
                        // message("app   "+i);
                        rdata.hc2 = i;
                        out[i] = abstime() + 15;
                        if(rdata.hc == 0){ camps.out0[rdata.hc2] = abstime() + 15; }
                        if(rdata.hc == 1){ camps.out1[rdata.hc2] = abstime() + 15; }
                        if(rdata.hc == 2){ camps.out2[rdata.hc2] = abstime() + 15; }
                        if(rdata.hc == 3){ camps.out3[rdata.hc2] = abstime() + 15; }
                        if(rdata.hc == 4){ camps.out4[rdata.hc2] = abstime() + 15; }
                        break;
                    }
                    i++;
                }
            }
        }
    }
    if(rdata.mid == 15 and rdata.status < 3 and abstime() > 0)
    {
        if(rdata.status == 0 and search(WheeledGrabber, amb0_t) != null and distance2d(search(WheeledGrabber, amb0_t).position,amb0_t) <= 18)
        {
            rdata.roamDist = 3;
            rdata.guardDist = 3;
            rdata.status = 1;
        }
        if(rdata.status == 1)
        {
            if(distance2d(pos,amb0_0) <= 6)
            {
                rdata.status = 2;
                rdata.center = amb0_1;
            }
            else if(rdata.center != amb0_0)
            {
                rdata.center = amb0_0;
            }
        }
        if(rdata.status == 2)
        {
            if(distance2d(pos,amb0_1) <= 6)
            {
                rdata.roamDist = 20;
                rdata.guardDist = 20;
                rdata.status = 3;
                rdata.center = amb0_2;
                rdata.attackDist = rdata.attackDist * 2;
            }
            else if(rdata.center != amb0_0)
            {
                rdata.center = amb0_1;
            }
        }
    }
    else
    {
        if(rdata.hc != -1)
        {
            message(rdata.hc+"   "+rdata.hc2);
            if(rdata.hc == 0){ camps.out0[rdata.hc2] = abstime() + 15 + 70 * rand(); }
            if(rdata.hc == 1){ camps.out1[rdata.hc2] = abstime() + 15 + 70 * rand(); }
            if(rdata.hc == 2){ camps.out2[rdata.hc2] = abstime() + 15 + 70 * rand(); }
            if(rdata.hc == 3){ camps.out3[rdata.hc2] = abstime() + 15 + 70 * rand(); }
            if(rdata.hc == 4){ camps.out4[rdata.hc2] = abstime() + 15 + 70 * rand(); }
        }
    }
}

extern void LvlCntlr_main()
{
    int i, i2, list[];
    float out[];
    
    Camps camps();
    
    i = 0;
	list[i++] = AlienEgg;
	list[i++] = AlienAnt;
	list[i++] = AlienSpider;
	list[i++] = AlienWorm;
	list[i++] = AlienWasp;
    
    object item = retobject(0), item2 = retobject(0);
    float dist = 9999;
    
    while(abstime() <= 0) {wait(0.5);}
    
    i = 0;
    while(item != null and retobject(i) != null)
    {
        item = retobject(i);
        if(item.category == DefenseTower)
        {
            break;
        }
        i++;
    }
    i = 0;
    while(item2 != null and item != null and retobject(i) != null)
    {
        if(retobject(i).category == TrackedGrabber and distance2d(retobject(i).position,item.position) < dist)
        {
            item2 = retobject(i);
            dist = distance2d(item2.position,item.position);
        }
        i++;
    }
    while(item != null and abstime() < 30)
    {
        if(item.energyCell != null)
        {
            if(item2 != null)
            {
                wait(0.5);
                delete(item2.id,0);
            }
            break;
        }
        wait(1);
    }
    // Can't make this shit work properly
    while(false)
    {
        i = 0;
        while(i < sizeof(camps.awd))
        {
            if(camps.awd[i] > 0)
            {
                if(search(list,camps.camps[i]) == null or distance2d(search(list,camps.camps[i]).position,camps.camps[i]) > camps.awd[i])
                {
                    camps.awd[i] = -1;
                    // message("test");
                }
            }
            i++;
        }
        i = 0;
        while(i < sizeof(camps.camps))
        {
            if(i >= sizeof(camps.awd) or camps.awd[i] < 0)
            {
                if(i == 0){ out = camps.out0; }
                if(i == 1){ out = camps.out1; }
                if(i == 2){ out = camps.out2; }
                if(i == 3){ out = camps.out3; }
                if(i == 4){ out = camps.out4; }
                if(i > 4){ break; }
                i2 = 0;
                while(i2 < sizeof(out))
                {
                    if(out[i2] <= abstime())
                    {
                        if(Spawn(i) == 1)
                        {
                            out[i] = abstime() + 15;
                        }
                    }
                    i2++;
                }
            }
            i++;
        }
    }
}
