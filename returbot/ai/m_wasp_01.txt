extern void object::Attack( )
{
	int		list[], buildings[], i, merror = 0;
	object	p, ps[];
	point	dest, orig, lastPos = position;
    float       mp = 1, tp = 1, mdel = abstime() + 15;

	errmode(0);
	while ( ismovie() != 0 )  wait(1);

	i = 0;
	list[i++] = WingedGrabber;
	list[i++] = TrackedGrabber;
	list[i++] = WheeledGrabber;
	list[i++] = LeggedGrabber;
	list[i++] = WingedShooter;
	list[i++] = TrackedShooter;
	list[i++] = WheeledShooter;
	list[i++] = LeggedShooter;
	list[i++] = WingedOrgaShooter;
	list[i++] = TrackedOrgaShooter;
	list[i++] = WheeledOrgaShooter;
	list[i++] = LeggedOrgaShooter;
	list[i++] = WingedSniffer;
	list[i++] = TrackedSniffer;
	list[i++] = WheeledSniffer;
	list[i++] = LeggedSniffer;
	list[i++] = Thumper;
	list[i++] = PhazerShooter;
	list[i++] = Recycler;
	list[i++] = Shielder;
	list[i++] = Subber;
	list[i++] = Me;
	list[i++] = Derrick;
	list[i++] = BotFactory;
	list[i++] = PowerStation;
	list[i++] = Converter;
	list[i++] = RepairCenter;
	list[i++] = DefenseTower;
	list[i++] = ResearchCenter;
	list[i++] = RadarStation;
	list[i++] = ExchangePost;
	list[i++] = PowerPlant;
	list[i++] = AutoLab;
	// list[i++] = NuclearPlant; // too freaking big
    
	i = 0;
	buildings[i++] = Derrick;
	buildings[i++] = BotFactory;
	buildings[i++] = PowerStation;
	buildings[i++] = Converter;
	buildings[i++] = RepairCenter;
	buildings[i++] = DefenseTower;
	buildings[i++] = ResearchCenter;
	buildings[i++] = RadarStation;
	buildings[i++] = ExchangePost;
	buildings[i++] = PowerPlant;
	buildings[i++] = AutoLab;
	buildings[i++] = NuclearPlant;

    orig = position;
    p = radar(AlienNest,0,5);
    if(p != null and radar(OrgaMatter,0,5) != null and distance2d(radar(OrgaMatter,0,5).position,p.position) < 1)
    {
        orig = p.position;
    }
    motor(1,1);
    motor(-1,-1);
    motor(0,0);
    wait(cmdline(0));
	while ( ismovie() == 0 )
	{
        if ( merror != 0 )
        {
            merror = 0;
            turn(rand()*360-180);
            jet(1);
            motor(1,1);
            wait(1);
        }
		else if ( load == null )
		{
                p = search(OrgaMatter, orig);
                if ( p == null )
                {
                    jet(1);  // monte
                    dest = position;
                    dest.x += (rand()-0.5)*10;
                    dest.y += (rand()-0.5)*10;
                    goto(dest);  // va n'importe où
                    wait(2);
                }
                else
                {
                    dest = p.position;
                    dest.z = position.z;
                    if ( distance(dest, position) > 1.25 )
                    {
                        jet(1);  // monte
                        goto(dest);
                    }
                    else
                    {
                        jet(-1);
                        while ( altitude > 0 );
                        grab();
                    }
                }
		}
		else  // porte matière ?
		{
            ps = radarall(list, 0, 360, 0, 1000, 1, FilterOnlyLanding);
            i = 0;
            p = null;
            while(i < sizeof(ps))
            {
                // Detect enemy only if it is not underwater
                if(ps[i] != null and ps[i].shieldLevel > 0 and ps[i].altitude + topo(ps[i].position) > -2.0)
                {
                    p = ps[i];
                    break;
                }
                i++;
            }
			if ( p != null )
			{
                dest = p.position;
				if (distance2d(position,dest) <= 20 and search(buildings,dest) == p)
				{
                    if (distance2d(position,dest) > 1.25)
                    {
                        goto(p.position);  // va sur la cible
                    }
                    else
                    {
                        drop();  // lâche la matière
                    }
				}
                else
                {
                    if(p != null and p.velocity.x != nan)
                    {
                        dest.x = dest.x + p.velocity.x;
                    }
                    if(p != null and p.velocity.y != nan)
                    {
                        dest.y = dest.y + p.velocity.y;
                    }
                    if ( distance2d(position,dest) < 1.25 )
                    {
                        drop();
                    }
                    else
                    {
                        jet(1);
                        if(direction(dest) > 2)
                        {
                            tp = direction(dest) / 60;
                            if(distance2d(position,dest) < 6)
                            {
                                tp = tp + tp / distance2d(position,dest);
                            }
                            motor (mp-0.3*tp, mp+0.3*tp);
                        }
                        else if(direction(dest) < -2)
                        {
                            tp = -direction(dest) / 60;
                            motor (mp+0.3*tp, mp-0.3*tp);
                        }
                        else
                        {
                            motor (mp, mp);
                        }
                        wait(0.1);
                        if(abstime() > mdel)
                        {
                            mdel = abstime() + 3;
                            if (distance2d(lastPos, position) < 0.2){ merror = 1; }
                            lastPos = position;
                        }
                    }
                }
			}
            else
            {
                jet(1);  // monte
                dest = position;
                dest.x += (rand()-0.5)*10;
                dest.y += (rand()-0.5)*10;
                goto(dest);  // va n'importe où
                wait(2);
            }
		}
	}
    motor(0,0);
    jet(1);
    goto(orig);
}
