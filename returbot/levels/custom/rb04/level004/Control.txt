public class Camps
{
    static point[] camps, resp0, resp1, resp2, resp3, resp4;
    static float[] awd = {40, 40, 40, 40, 40};
    static float[] out0 = {1,1}, out1 = {1,1}, out2 = {1,1}, out3 = {1,1}, out4 = {1,1};
    private static int[] lim = { 12, 12, 9, 12, 9 };

    // Constructor
    void Camps() {}

    float GetLim(int i) { return lim[i]; }

    // Initialize static data, called only once in LvlCntlr_main()
    void InitCamps()
    {
        if(camps == null)
        {
            camps[0] = new point(-160.09, 9.69802, 0);
            camps[1] = new point(-169.342, 90.0963, 0);
            camps[2] = new point(-138.376, 141.723, 0);
            camps[3] = new point(-8.62029, 178.623, 0);
            camps[4] = new point(30.2652, 50.2889, 0);
            resp0[0] = new point(-350.602, 84.2715, 0);
            resp0[1] = new point(-345.931, -84.621, 0);
            resp1[0] = new point(-321.713, 144.735, 0);
            resp1[1] = new point(-333.848, 141.365, 0);
            resp2[0] = new point(-181.894, 156.12, 0);
            resp2[1] = new point(-181.621, 165.214, 0);
            resp3[0] = new point(202.222, 244.837, 0);
            resp3[1] = new point(107.624, 356.806, 0);
            resp3[2] = new point(-2.72068, 351.422, 0);
            resp4[0] = new point(195.726, 354.882, 0);
            resp4[1] = new point(202.471, 232.146, 0);
        }
    }
}

public int Spawn(int n)
{
	int     list[], i = 0, s = 0;
    point   rp[];
    
	list[i++] = AlienEgg;
	list[i++] = AlienAnt;
	list[i++] = AlienSpider;
	list[i++] = AlienWorm;
	list[i++] = AlienWasp;
    
    Camps camps();
    
    if(n == 0){ rp = camps.resp0; }
    if(n == 1){ rp = camps.resp1; }
    if(n == 2){ rp = camps.resp2; }
    if(n == 3){ rp = camps.resp3; }
    if(n == 4){ rp = camps.resp4; }
    
    i = 0;
    while(i < sizeof(rp))
    {
        if(radar(list) == null or distance2d(rp[i],search(list,rp[i]).position) > 2)
        {
            s = 1;
            produce(rp[i],360*rand(),AlienSpider,"c_spider_01.txt");
            break;
        }
        i++;
    }
    return s;
}

public class Roam_data
{
    point center;
    float roamDist;
    float guardDist;
    float attackDist;
    float frange;
    float appmin;
    float pred;
    float cgo;
    int mid;
    int status;
    int fp;
    int hc;
    int hcs;
    void Roam_data()
    {
        fp = 0;
        hc = -1;
        hcs = -1;
    }
}

public void Rdata_set(int cat, point pos, Roam_data rdata)
{
    point rp[];
    float out[];
    
    int i, i2;
    
    Camps camps();
    
    if(rdata.status == -1)
    {
        rdata.status = 0;
        rdata.center = pos;
        rdata.roamDist = 20;
        rdata.guardDist = 20;
        if(cat == AlienAnt)
        {
            rdata.attackDist = 40;
            rdata.frange = 40;
        }
        else
        {
            rdata.attackDist = 45;
            rdata.frange = 8;
        }
        i = 0;
        while(rdata.hc == -1 and i <= 4)
        {
            if(i == 0){ rp = camps.resp0; }
            if(i == 1){ rp = camps.resp1; }
            if(i == 2){ rp = camps.resp2; }
            if(i == 3){ rp = camps.resp3; }
            if(i == 4){ rp = camps.resp4; }
            i2 = 0;
            while(rdata.hc == -1 and i2 < sizeof(rp))
            {
                if(distance2d(pos,rp[i2]) < 2)
                {
                    rdata.hc = i;
                }
                i2++;
            }
            i++;
        }
        if(rdata.hc != -1)
        {
            rdata.mid = 30;
            rdata.center = camps.camps[rdata.hc];
            if(rdata.hc == 0){ out = camps.out0; }
            if(rdata.hc == 1){ out = camps.out1; }
            if(rdata.hc == 2){ out = camps.out2; }
            if(rdata.hc == 3){ out = camps.out3; }
            if(rdata.hc == 4){ out = camps.out4; }
            if(rdata.hc == 4)
            {
                rdata.roamDist = 20;
                rdata.guardDist = 20;
            }
            else
            {
                rdata.roamDist = 30;
                rdata.guardDist = 30;
            }
            i = 0;
            while(rdata.hcs == -1 and i < sizeof(out))
            {
                if(out[i] <= abstime() + 10)
                {
                    rdata.hcs = i;
                    out[i] = abstime() + 15;
                    break;
                }
                i++;
            }
        }
    }
    if(rdata.hc != -1 and rdata.hcs != -1)
    {
        if(rdata.hc == 0){ camps.out0[rdata.hcs] = abstime() + 20 + 100 * rand(); }
        if(rdata.hc == 1){ camps.out1[rdata.hcs] = abstime() + 20 + 100 * rand(); }
        if(rdata.hc == 2){ camps.out2[rdata.hcs] = abstime() + 20 + 100 * rand(); }
        if(rdata.hc == 3){ camps.out3[rdata.hcs] = abstime() + 15 + 90 * rand(); }
        if(rdata.hc == 4){ camps.out4[rdata.hcs] = abstime() + 15 + 100 * rand(); }
    }
    camps = null;
}

extern void LvlCntlr_main()
{
    int i, i2, list[], lim;
    float out[];
    
    Camps camps();
    camps.InitCamps();
    
    i = 0;
	list[i++] = AlienEgg;
	list[i++] = AlienAnt;
	list[i++] = AlienSpider;
	list[i++] = AlienWorm;
	list[i++] = AlienWasp;
    
    object item = retobject(0), item2 = retobject(0);
    float dist = 9999;
    
    while(abstime() <= 0) {wait(0.5);}
    
    i = 0;
    while(item != null and retobject(i) != null)
    {
        item = retobject(i);
        if(item.category == DefenseTower)
        {
            break;
        }
        i++;
    }
    i = 0;
    while(item2 != null and item != null and retobject(i) != null)
    {
        if(retobject(i).category == TrackedGrabber and distance2d(retobject(i).position,item.position) < dist)
        {
            item2 = retobject(i);
            dist = distance2d(item2.position,item.position);
        }
        i++;
    }
    while(item != null and abstime() < 30)
    {
        if(item.energyCell != null)
        {
            if(item2 != null)
            {
                wait(0.5);
                delete(item2.id,0);
            }
            break;
        }
        wait(1);
    }
    
    // Respawn of aliens: it's not perfect, but it works
    while(true)
    {
        i = 0;
        while(i < sizeof(camps.awd))
        {
            if(camps.awd[i] > 0)
            {
                item = search(list,camps.camps[i]);
                if(item == null or distance2d(item.position,camps.camps[i]) > camps.awd[i])
                {
                    camps.awd[i] = -1;
                }
            }
            i++;
        }
        i = 0;
        while(i < sizeof(camps.camps))
        {
            if(i >= sizeof(camps.awd) or camps.awd[i] < 0)
            {
                if(i == 0){ out = camps.out0; lim = camps.GetLim(0); }
                if(i == 1){ out = camps.out1; lim = camps.GetLim(1); }
                if(i == 2){ out = camps.out2; lim = camps.GetLim(2); }
                if(i == 3){ out = camps.out3; lim = camps.GetLim(3); }
                if(i == 4){ out = camps.out4; lim = camps.GetLim(4); }
                if(i > 4){ break; }
                i2 = 0;
                while(lim > 0 and i2 < sizeof(out))
                {
                    if(out[i2] <= abstime())
                    {
                        if(Spawn(i) == 1)
                        {
                            out[i2] = abstime() + 15;
                            lim = lim - 1;
                            wait(0.1);
                        }
                    }
                    i2++;
                }
            }
            i++;
        }
    }
}
